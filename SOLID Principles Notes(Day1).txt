SOLID PRINCIPLES

*It was created by robert C Martin also known as uncle bob
*This is principle provides clean code or a proper and good pratice for development

*FULL FORM
	S-Single Responsiblity
	O-Open/Closed Principle
	L-Liskov Substitution Principle
	I-Interface Segregation
	D-Dependency Inversion

*Single Responsiblity:
			In this it says that a class should have only one purpose.
	Ex:
		if it is used for calculating area of a square then it should only calc the area.
if it displays or prints the value it has calculated then it violates the law.

*Open/Closed:
		In this it says "Objects or entities should be open for extension but closed for modification."
it means that when we try to add a new feature like finding the area of a circle, if we edit the existing then it violates
this law.
		This tells that we can only extend the feature without changing the existing code rather expand its features now 
and in future without touching the existing code and just adding new class seperatly.

*Liskov Substitution:
It tells that a child class should follow the rules of the parent class.
ex:
	if there is toys class where there are dog,cat and robot. we play a game where the toy should make a sound.
when we take dog it barks,cat meows and robot does not make noise that means it violates the law.
In this principle all the class should follow a particular rule which is inherited

*Interface Segregation
In this a class shouldn’t be forced to use methods it doesn’t need.
Ex:
if there a class with the feature where all the toys call play music, walk and fly.If there is a car it can play music 
but cannot walk or fly. In this case it violates the law
 